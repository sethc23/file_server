CREATE OR REPLACE FUNCTION zf_pdf_metadata(text)
  RETURNS text AS
$BODY$
#!/bin/bash
pdfinfo -meta $1 | jq -s -R -c -M -j '[ splits("
")? | split(":") as $i | 
{ ($i[0]?) : ( $i[1] | sub("( )+"; ""; "sl") ) } ]'
$BODY$
  LANGUAGE plsh;


CREATE OR REPLACE FUNCTION zf_pdftotext(text)
  RETURNS text AS
$BODY$
#!/bin/bash
pdftotext -q -nopgbrk $1 -
$BODY$
  LANGUAGE plsh;

CREATE OR REPLACE FUNCTION zf_queue_ocr(text)
  RETURNS text AS
$BODY$
#!/bin/bash
echo "printf 'working_RIGHT?' | socat - udp-sendto:0.0.0.0:32191" | batch
atq
$BODY$
  LANGUAGE plsh;

CREATE OR REPLACE FUNCTION z_array_sort(anyarray)
  RETURNS anyarray AS
$BODY$
SELECT ARRAY(SELECT unnest($1) ORDER BY 1)
$BODY$
  LANGUAGE sql;

CREATE OR REPLACE FUNCTION fs_es_file_idx_insert()
  RETURNS trigger AS
$BODY$

        local cj = require"cjson"
        require"pl"
        local df = Date.Format()

        _t=trigger
        
        local d = {}
        local _uid = ""
        for k,v in pairs(_t.relation["attributes"]) do
            d[k]=tostring(_t.row[k])
            if k=="uid" then _uid=tostring(_t.row[k]) end
            if k=="last_updated" then
                local d_str = tostring(_t.row[k])
                local dt = df:parse(d_str)        
                d[k]=tostring(dt.time)
            end
        end
        local tbl_name = _t.relation["name"]
        log(tbl_name)
            
        local cmd = [[echo 'GET /json?file_idx=]] .. cj.encode(d) ..
                      "&uid=" .. _uid .. [[' | socat - tcp:0.0.0.0:12501,reuseaddr,nonblock]]
        os.execute("echo '"..cmd.."' >> /tmp/tmp")
        os.execute(cmd)

    $BODY$
  LANGUAGE plluau;

  CREATE OR REPLACE FUNCTION fs_es_gmail_insert()
  RETURNS trigger AS
$BODY$#!/bin/bash

    _arr='[["orig_msg","all_mail_uid","g_msg_id","msg_id","last_updated","uid"],['
    for arg do
        if [ -z "$arg" ]; then
            _arr="$_arr\"$arg\","
        elif [ ${arg::1} = "{" ]; then
            _arr="$_arr$arg,"
        else
            _arr="$_arr\"$arg\","
        fi
        _uid="$arg"
    done
    _arr=${_arr::-1}"]]"
    
    _json=$(printf '%s
' "$_arr" | jq -Mc 'transpose | map({ key: .[0], value: .[1] }) | from_entries')
    echo "GET /json?gmail=$_json&uid=$_uid" | socat - tcp:0.0.0.0:12501,reuseaddr,nonblock

    $BODY$
  LANGUAGE plsh;

  CREATE OR REPLACE FUNCTION fs_process_files_in_file_idx()
  RETURNS trigger AS
$BODY$

    from subprocess                         import Popen            as sub_popen
    from subprocess                         import PIPE             as sub_PIPE
    from traceback                      import format_exc       as tb_format_exc
    from sys                            import exc_info         as sys_exc_info

    def txt_log(msg):
        with open('/tmp/tmp','a+') as f:
            f.write(msg+'\n')

    def upd_pdf(f_path):
        cmd = ';'.join([  'pdfinfo -meta %s | jq -sRcMj \'[ splits("\\n")? | split(":") as $i | \
                                { ($i[0]?) : ( $i[1] | sub("( )+"; ""; "sl") ) } ]\' \
                                | jq -cMj \'add\'' % f_path,
                           'echo "<BREAK>"',
                           'pdftotext -q -nopgbrk -layout %s -' % f_path,
                           'echo "<BREAK>"'
                       ])
        (_out,_err)                 =   sub_popen(cmd,stdout=sub_PIPE,shell=True).communicate()
        assert _err is None
        res = _out.split('<BREAK>')
        TD["new"]["_metadata"] = "'" + str(res[0].strip('\n[]')) + "'"
        _content = res[1].strip('\n')
        if _content:
            TD["new"]["_content"] = "'" + str(_content) + "'"
        else:
            TD["new"]["_run_ocr"] = True
        return TD["new"]

    def upd_from_ocr_pdf(f_path):
        cmd = 'pdftotext -q -nopgbrk -raw %s -' % ('%s_ocr.pdf' % f_path)
        (_out,_err)                 =   sub_popen(cmd,stdout=sub_PIPE,shell=True).communicate()
        assert _err is None
        if _out:
            TD["new"]["_content"] = _out
        return TD["new"]

    def upd_db(TD,orig):
        T = TD["new"]
        _repl = ' '.join(['%s=%s,' % (it,'%('+it+')s') for it in T.keys() if T[it]!=orig[it]])
        qry = "update file_idx set "+_repl[:-1]+' where uid='+str(T['uid'])
#         plpy.log(qry % T)
        plpy.execute(qry % T)
    
    try:
        orig = dict(zip(TD["new"].keys(),TD["new"].values()))
        base_dir = '/home/ub2/ARCHIVE/gmail_attachments/'
        f_key = TD["new"]["_key"]
        f_name = f_key
        f_path = base_dir + f_name
        f_type = TD["new"]["_filetype"]
        f_meta = TD["new"]["_metadata"]
        f_ocr = TD["new"]["_run_ocr"]

        # FIRST PASS -- ATTEMPT TO EXTRACT
        if f_type=='pdf' and not f_meta:
#             plpy.log("FIRST_PASS")
            TD["new"] = upd_pdf(f_path)
            if TD["new"]["_run_ocr"]==True:

                cmd = [ 'echo "GET /send?uuid=%s' % f_key,
                        '&filename=%s' % f_name,
                        '&filepath=%s' % f_path,
                        '" | socat - tcp:0.0.0.0:12501,reuseaddr,nonblock,shut-down'
                        ]
                (_out,_err) = sub_popen(''.join(cmd),stdout=sub_PIPE,shell=True).communicate()
                assert _err is None


        # SECOND PASS -- EXTRACT FROM OCR PDF
        elif f_meta and not f_ocr:
#             plpy.log("SECOND_PASS")
            TD["new"] = upd_from_ocr_pdf(f_path)

        if TD["new"]!=orig:
            upd_db(TD,orig)

    except plpy.SPIError:
        plpy.log('fps_gmail_update FAILED')
        plpy.log(tb_format_exc())
        plpy.log(sys_exc_info()[0])
        return


    $BODY$
  LANGUAGE plpythonu;

  CREATE OR REPLACE FUNCTION fs_update_es()
  RETURNS trigger AS
$BODY$#!/bin/bash

        /home/ub2/SERVER2/file_server/ws_elasticsearch.bash "$@"
    
    $BODY$
  LANGUAGE plsh;


CREATE OR REPLACE FUNCTION fs_update_file_idx_on_gmail_update()
  RETURNS trigger AS
$BODY$

    T = {'gmail_uid' : TD["new"]["uid"]}

    enumerate_attachments = """
            with upd as (
                select
                    'gmail' src_db,
                    uid src_uid,
                    _key,
                    regexp_replace(((_json->_key)::jsonb->'name')::text,E'"(.*)\\\\.([^\\.]+)"',E'\\\\2','g') _filetype,
                    (_json->_key)::jsonb _info
                from  (
                    select 
                        json_object_keys(json_array_elements(_att::json)::json) _key,
                        json_array_elements(_att::json)::json _json,
                        uid
                    from

                        (
                        select 
                            _attachments _att,uid
                        from (
                            select 
                                orig_msg->'attachments' _attachments,
                                uid
                            from gmail
                            where 
                            json_array_length((orig_msg->'attachments')::json) > 0
                            and uid = %(gmail_uid)s
                        ) f1
                    ) f2
                ) f3
            )
            insert into file_idx (
                src_db,
                src_uid,
                _key,
                _filetype,
                _info
                )
            select 
                u.src_db,
                u.src_uid,
                u._key,
                lower(u._filetype),
                u._info
            from 
                upd u,
                (select array_agg(_key) all_keys from file_idx) s1
            where all_keys is null
            OR not u._key = any(all_keys)

          """ % T
    
    plpy.execute(enumerate_attachments)
    
    $BODY$
  LANGUAGE plpythonu;

