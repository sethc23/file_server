
# SERVER1 FILE PROCESSING SERVER RECEIVER
server {
    listen                          12501;
    #access_log                      syslog:server=unix:/var/sockets/ngx_access.sock gen_info;
    #access_log                      /var/log/syslogs/tmp.log gen_info;
    error_log                       /var/log/syslogs/tmp.log;
    access_log                      off;
    lingering_close                 always;
    lua_socket_log_errors           on;
    #proxy_pass_request_headers      on;
    #proxy_pass_request_body         on;

    location /local/ {
        proxy_set_header            Accept-Encoding "application/json, text/javascript, */*; q=0.01";
        proxy_pass                  http://10.0.1.51:9200/$arg_idx/json/$arg_uid?routing=gmail;
    }

    location = /receive {
        content_by_lua '
            local fs_wb = require "fs_websockets"        
            local base_dir = "/home/ub1/SERVER1/file_server"
            local save_dir = "/docs/inbox"
            local f = fs_wb.receive_file(base_dir..save_dir)                  -- uuid,filename,filepath
            ngx.exit(ngx.HTTP_OK)
        ';
    }

    location = /send {
        content_by_lua '
            local fs_wb = require "fs_websockets"        
            fs_wb.send_file("10.0.1.52:12501")
        ';
    }

    location /receive_json_file {
        content_by_lua '
            local fs_wb = require "fs_websockets"
            local cj = require"cjson"
            local f = fs_wb.receive_file("/tmp")                  -- "tbl","uid","uuid","filepath"

            -- read file
            -- tbl=gmail
            -- uid=...
            -- uuid=2945eebb-b3e0-40b2-a503-17ef4045afb9
            -- filepath=/tmp/2945eebb-b3e0-40b2-a503-17ef4045afb9

            local json_file = io.open(f.filepath)
            local _json = json_file:read("*a")
            json_file:close()

            -- Post Data and Format Returned Response:
            local res               = ngx.location.capture("/local/",
                { method            = ngx.HTTP_POST,
                  args              = {idx = f.tbl, uid = f.uid},
                  body              = _json }
                )
            
            local r                 = {}
            for key, val in pairs(res) do
                r[key]              = val
            end
            local tmp               = cj.encode(res)

            if 200<=res["status"] and res["status"]<300 then
                --ngx.log(ngx.ERR,"-- SUCCESS --")
                os.execute("rm -fr "..f.filepath)
            else
                ngx.log(ngx.ERR,"-- FAIL --")
                ngx.log(ngx.ERR,tmp)
            --    ngx.log(ngx.ERR,_json)
            end


        ';
    }
}


# ELASTICSEARCH EXTERNAL SYSLOG RECEIVER
server {
    listen                          12401;
    #access_log                      syslog:server=unix:/var/sockets/ngx_access.sock gen_info;
    #access_log                      /var/log/syslogs/tmp.log gen_info;
    access_log                      off;
    lingering_close                 always;
	lua_socket_log_errors           off;
    proxy_pass_request_headers      on;
    proxy_pass_request_body         on;


    location /local {
        proxy_set_header            Accept-Encoding "application/json, text/javascript, */*; q=0.01";
        proxy_pass                  http://10.0.1.51:9200/ngx_syslog/message;
    }

    location = / {
        content_by_lua '
            local server            = require "resty.websocket.server"
            local cjson             = require "cjson"

            -- Make Connection or Error:
            local wb, err           = server:new{
                timeout             = 10000,                        -- in milliseconds
                max_payload_len     = 1048576,
            }
            if not wb then
                ngx.log(ngx.ERR, "failed to new websocket: ", err)
                return ngx.exit(444)
            end

            -- Confirm Connection or Error:
            local bytes, err        = wb:send_text("MESSAGE FROM UB1 ON WebSocket!")
            if not bytes then
                ngx.log(ngx.ERR, "failed to send the 1st text: ", err)
                return ngx.exit(444)
            end

            -- Receive Data or Error:
            local data, typ, err    = wb:recv_frame()
            if not data then
                ngx.log(ngx.ERR, "failed to receive a frame: ", err)
                return ngx.exit(444)
            end

            --ngx.log(ngx.WARN,type(data))
            ngx.log(ngx.WARN,cjson.encode(data))


            -- Post Data and Format Returned Response:
            local res               = ngx.location.capture("/local",
                { method            = ngx.HTTP_POST,
                  body              = data }
                )

            local r                 = {}
            for key, val in pairs(res) do
                r[key]              = val
            end
            local tmp               = cjson.encode(res)

            -- Acknowledge Completion or Error:
            bytes, err              = wb:send_text(tmp)
            if not bytes then
                ngx.log(ngx.ERR, "failed to send the 2nd text: ", err)
                return ngx.exit(444)
            end
        ';
    }
}


# ELASTICSEARCH INTERNAL CONTENT RECEIVER
server {
    listen                          unix:/var/sockets/web_socket_relay.sock;
    lingering_close                 always;
    lua_socket_log_errors           off;
    access_log                      off;
    error_log                       /var/log/syslogs/tmp_ngx_error.log info;
    proxy_pass_request_headers      on;
    proxy_pass_request_body         on;

    location /local {
        proxy_set_header            Accept-Encoding "application/json, text/javascript, */*; q=0.01";
        proxy_pass                  http://10.0.1.51:9200/ngx_syslog/message;
    }

    location / {
        content_by_lua '

            -- JSON Encode Post and Send:
            local cjson = require "cjson"
            local r={}
            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                r[key] = val
            end
            local res = cjson.encode(r)


            --ngx.log(ngx.WARN,res)


            -- Post Data and Format Returned Response:
            local res               = ngx.location.capture("/local",
                { method            = ngx.HTTP_POST,
                  body              = cjson.encode(r) }
                )

            local r                 = {}
            for key, val in pairs(res) do
                r[key]              = val
            end
            local tmp               = cjson.encode(res)


            --ngx.log(ngx.WARN,tmp)


        ';
    }

}