
# FILE PROCESSING SERVER SENDER
server {
    listen                                  12501;
    #lingering_close                        always;
    #access_log                              /var/log/syslogs/tmp.log gen_info;
    access_log                              off;
    error_log                               /var/log/syslogs/tmp.log;
    lua_socket_log_errors                   off;

    location /send {
        content_by_lua '
            local fs_wb = require "fs_websockets"        
            fs_wb.send_file("10.0.1.51:12501")
        ';
    }

    location = /receive {
        content_by_lua '
            local fs_wb = require "fs_websockets"        
            local base_dir = "/home/ub2/ARCHIVE/gmail_attachments"
            local f = fs_wb.receive_file(base_dir)

            local qry = [[update file_idx set _run_ocr = false where _key = \']]..f.uuid:sub(1,#f.uuid-4)..[[\']]
            local sh_cmd = [[curl --get "http://localhost:9999/qry" --data-urlencode "qry=]]..qry..[[" >> /dev/null 2&>1]]
            os.execute(sh_cmd)

            ngx.exit(ngx.HTTP_OK)
        ';
    }

    location /send_json_file {
        content_by_lua '
            local fs_wb = require "fs_websockets"

            local dest = {ip="10.0.1.51:12501", url_dest="/receive_json_file", exit=false}
            local r = fs_wb.send_file(dest)             -- "tbl","uid","uuid","filepath"

            --os.execute("rm -fr "..r.filepath)
        ';
    }

}


# ELASTICSEARCH CONTENT SENDER
server {
    listen                                  unix:/var/sockets/web_socket_relay.sock;
    #lingering_close                        always;
	lua_socket_log_errors                   off;
    access_log                              off;

    location / {
        content_by_lua '
            local client = require "resty.websocket.client"
            local wb, err = client:new{
                timeout = 10000,                            -- in milliseconds
                max_payload_len = 1048576,
            }
            local uri = "ws://10.0.1.51:12401/"

            --ngx.say("uri: ", uri)


            -- Make Connect and Error Check:
            local ok, err = wb:connect(uri)
            if not ok then
                ngx.say("failed to connect: " .. err)
                return
            end
            local data, typ, err = wb:recv_frame()
            if not data then
                ngx.say("failed to receive 1st frame: ", err)
                return
            end

            --ngx.say("1: received: ", data, " (", typ, ")")

            -- JSON Encode Post and Send:
            local cjson = require "cjson"
            local r={}
            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                r[key] = val
            end
            local res = cjson.encode(r)

            ngx.say(res)

            local bytes, err = wb:send_text(res)
            if not bytes then
                ngx.say("failed to send frame: ", err)
                return
            end

            data, typ, err = wb:recv_frame()
            if not data then
                ngx.say("failed to receive 2nd frame: ", err, " (",data, ")")
                return
            end

            local tmp = string.gsub(data,"\\\\","")
            local status_code_resp = cjson.decode(data).status
            local resp_id = cjson.decode(cjson.decode(data).body)._id

            ngx.say(resp_id)

        ';
    }

}

